#!/bin/bash
#
# ci/scripts/shipit
#
# Script for generating Github release / tag assets
# and managing release notes for a BOSH Release pipeline
#
# author:  James Hunt <james@niftylogic.com>
# created: 2016-03-30

set -eu

header() {
	echo
	echo "###############################################"
	echo
	echo $*
	echo
}

: ${REPO_ROOT:?required}
: ${RELEASE_ROOT:?required}
: ${GH_RELEASE_NAME:?required}
: ${REPO_OUT:?required}
RELEASE_BRANCH=${RELEASE_BRANCH:-"master"}
: ${GITHUB_OWNER:?required}
: ${VERSION_FROM:?required}
: ${GIT_EMAIL:?required}
: ${GIT_NAME:?required}

if [[ ! -f ${VERSION_FROM} ]]; then
  echo >&2 "Version file (${VERSION_FROM}) not found.  Did you misconfigure Concourse?"
  exit 2
fi
version=$(cat ${VERSION_FROM})
if [[ -z ${version} ]]; then
  echo >&2 "Version file (${VERSION_FROM}) was empty.  Did you misconfigure Concourse?"
  exit 2
fi

if [[ ! -f ${REPO_ROOT}/ci/release_notes.md ]]; then
  echo >&2 "ci/release_notes.md not found.  Did you forget to write them?"
  exit 1
fi

script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

###############################################################

git clone ${REPO_ROOT} ${REPO_OUT}

pushd ${REPO_OUT}

if [[ -f ".gitattributes" ]] && grep -qF "lfs" ".gitattributes"; then
  git lfs install
fi

release_name=$(bosh int config/final.yml --path /final_name 2> /dev/null) \
  || release_name=$(bosh int config/final.yml --path /name)

blobstore_provider=$(bosh int config/final.yml --path /blobstore/provider)
if [[ ${blobstore_provider} == "s3" && -n ${AWS_ACCESS_KEY} ]]; then
  cat > config/private.yml <<YAML
---
blobstore:
  options:
    access_key_id: ${AWS_ACCESS_KEY}
    secret_access_key: ${AWS_SECRET_KEY:?required}
YAML
fi

header "Pulling in any git submodules..."
git submodule update --init --recursive --force

header "Create final release..."
bosh -n create-release --final --version "${version}"
bosh -n create-release releases/${release_name}/${release_name}-${version}.yml \
              --tarball releases/${release_name}/${release_name}-${version}.tgz
popd

release_tgz=${REPO_OUT}/releases/${release_name}/${release_name}-${version}.tgz
export release_sha1=$(sha1sum $release_tgz | head -n1 | awk '{print $1}')
export release_url="https://github.com/${GITHUB_OWNER}/${release_name}-boshrelease/releases/download/v${version}/${release_name}-${version}.tgz"
echo "RELEASE_SHA1=${release_sha1}"

mkdir -p ${RELEASE_ROOT}/artifacts
echo "v${version}"                         > ${RELEASE_ROOT}/tag
echo "${GH_RELEASE_NAME} v${version}"      > ${RELEASE_ROOT}/name
mv ${REPO_OUT}/releases/*/*-${version}.tgz   ${RELEASE_ROOT}/artifacts
mv ${REPO_OUT}/ci/release_notes.md           ${RELEASE_ROOT}/notes.md
cat >> ${RELEASE_ROOT}/notes.md <<EOF

### Deployment

\`\`\`yaml
releases:
- name:    ${release_name}
  version: ${version}
  url:     ${release_url}
  sha1:    ${release_sha1}
\`\`\`
EOF
cat > ${RELEASE_ROOT}/notification <<EOF
<!here> New ${release_name} v${version} released!
EOF


header "Update git repo with final release..."
if [[ -z $(git config --global user.email) ]]; then
  git config --global user.email "${GIT_EMAIL}"
fi
if [[ -z $(git config --global user.name) ]]; then
  git config --global user.name "${GIT_NAME}"
fi

pushd ${REPO_OUT}
${script_dir}/update-manifest-release ${release_name} ${version} ${release_url} ${release_sha1}

git merge --no-edit "${RELEASE_BRANCH}"
git add -A
git status
git commit -m "release v${version}"
popd

cat > ${NOTIFICATION_OUT:-notifications}/message <<EOS
New ${release_name} v${version} released. <https://github.com/${GITHUB_OWNER}/${release_name}-boshrelease/releases/tag/v${version}|Release notes>.
EOS
